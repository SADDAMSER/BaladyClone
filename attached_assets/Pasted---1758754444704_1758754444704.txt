✅ التقييم النهائي: ما تم إصلاحه
🟢 تم إصلاح جميع المشاكل السابقة بنجاح — والآن الزر يعمل!

✔️ ما تم إصلاحه:
المشكلة	الحالة	التفاصيل
❌ Workflow definition not found	✅ مُصلح	تم إنشاء تعريف سير العمل في قاعدة البيانات.
❌ new_status cannot be null	✅ مُصلح	تم تحديث recordStatusChange لتعيين newStatus.
❌ endpoint خاطئ (/public-service-review)	✅ مُصلح	تم استخدام /start الصحيح.
❌ JWT validation	✅ مُصلح	تم استخدام middleware الصحيح.
→ ✅ الآن — الضغط على زر "اعتماد" يُحدث حالة الطلب ويُرسل إشعارًا.

⚠️ لكن! هناك مشكلة جديدة ظهرت
log

POST /api/applications/8a3de9b8-.../generate-invoice 403
LBAC_AUDIT: accessGranted=false, denialReason="missing_geographic_context"
❗ هذا يعني: عند توليد فاتورة — النظام يرفض بسبب LBAC — لأن المستخدم لا يملك سياق جغرافي كافٍ.

🛠️ الخطة العاجلة: إصلاح LBAC لطباعة الفاتورة (5 دقائق)
الخطوة 1: تحديث generateInvoice ليستخدم السياق الجغرافي للمستخدم
TypeScript

// server/routes/applications.ts
router.post('/:id/generate-invoice', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    const userId = req.user?.id;

    // 1. جلب السياق الجغرافي للمستخدم
    const userAssignments = await db
      .select()
      .from(userGeographicAssignments)
      .where(eq(userGeographicAssignments.userId, userId));

    if (userAssignments.length === 0) {
      return res.status(403).json({ error: 'لا تملك صلاحيات جغرافية' });
    }

    // 2. جلب بيانات الطلب
    const application = await db
      .select()
      .from(applications)
      .where(eq(applications.id, id))
      .limit(1);

    if (!application[0]) {
      return res.status(404).json({ error: 'الطلب غير موجود' });
    }

    // 3. التحقق من LBAC
    const hasAccess = userAssignments.some(assignment =>
      assignment.governorateId === application[0].governorateId
    );

    if (!hasAccess) {
      return res.status(403).json({ error: 'غير مصرح لك بالوصول لهذا الطلب' });
    }

    // 4. توليد الفاتورة
    const invoice = {
      applicationId: id,
      amount: calculateFee(application[0]),
      generatedAt: new Date(),
      status: 'pending',
    };

    await db.insert(invoices).values(invoice);

    res.json({ success: true, invoice });
  } catch (error) {
    console.error('Error generating invoice:', error);
    res.status(500).json({ error: 'فشل في توليد الفاتورة' });
  }
});
الخطوة 2: إضافة جدول invoices إذا لم يكن موجودًا
TypeScript

// shared/schema.ts
export const invoices = pgTable('invoices', {
  id: uuid('id').primaryKey().defaultRandom(),
  applicationId: uuid('application_id')
    .notNull()
    .references(() => applications.id),
  amount: numeric('amount', { precision: 10, scale: 2 }).notNull(),
  generatedAt: timestamp('generated_at').defaultNow(),
  status: text('status').default('pending'), // pending, paid, cancelled
  paidAt: timestamp('paid_at'),
  paymentMethod: text('payment_method'), // cash, electronic
});
الخطوة 3: إعادة تشغيل السيرفر واختبار الطباعة
أعد تشغيل السيرفر.
ادخل إلى /employee/public-service.
اضغط على زر "اعتماد" → ثم "طباعة".
تحقق من ظهور الفاتورة.
📜 الأمر التنفيذي الفوري
إلى الفريق:
أنشئوا جدول invoices فورًا — ثم حدثوا endpoint /generate-invoice.
هذا آخر عائق في المهمة 1.2.

✅ الخلاصة
🟢 المشكلة الأصلية (زر الاعتماد) حُلت بنسبة 100%.
🟡 المشكلة الجديدة (الفاتورة) يمكن حلها في 5 دقائق.
🚀 بعد هذا — تكون المهمة 1.2 جاهزة للإعلان عن إكمالها.

