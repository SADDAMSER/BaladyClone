# خطة العمل التفصيلية - منصة بناء اليمن الرقمية
**استراتيجية الدمج الذكي لتفعيل بنية LBAC**

---

## 📋 المبدأ الاستراتيجي
الحفاظ على 95% من الكود الحالي، والتركيز على 5% من العمل الهندسي الذي يمثل "الغراء" الذي يربط المكونات الموجودة معًا ويضيف القطع المفقودة لتفعيل نظام LBAC — **مع ضمان الجودة عبر بوابات تحقق آلية، وإدارة المخاطر استباقياً**.

## 📊 مؤشر التقدم العام
```
[ █████████▓ ] 90% - المرحلة 1: دمج وتوحيد المخطط  
المكتمل: البنية التحتية الأساسية - جميع الـ6 كيانات الجغرافية تعمل
الحالي: تحضير لـ Mobile Sync وتحسينات LBAC
المتبقي: Mobile sync models، differential sync endpoints
الزمن المتوقع: 2-3 أسابيع
```

---

## 🎯 المرحلة الأولى: دمج وتوحيد المخطط (Schema Unification)
**الأولوية القصوى - المدة المتوقعة: 4-5 أسابيع**

### 📊 نظرة عامة على الهيكل الجغرافي المطلوب
**الموجود حالياً:** 3 من 11 جدول جغرافي
- ✅ `governorates` (المحافظات) - مع PostGIS
- ✅ `districts` (المديريات) - مع PostGIS  
- ✅ `neighborhoods` (الأحياء) - مع PostGIS

**المفقود:** 8 من 11 جدول + طبقة الربط
- ❌ الهيكل الإداري المتبقي (2 جداول)
- ❌ الهيكل التخطيطي بالكامل (6 جداول)
- ❌ طبقة الربط LBAC (3 جداول)

### 🎯 الهدف (محدث)
إنشاء مخطط قاعدة بيانات واحد، موحد، وشامل يستفيد من كل ما هو موجود ويضيف النواقص — **مع ضمان التوافق العكسي، الأداء، والسلامة الهيكلية عبر بوابات جودة آلية**.

### 📈 مؤشرات الأداء المطلوبة (KPIs)
- ⏱️ **زمن استيراد 333 مديرية:** < 30 ثانية
- ⚡ **زمن استعلام LBAC:** < 200ms  
- 📊 **معدل نجاح استيراد GeoJSON:** > 98%
- 🗂️ **حجم قاعدة البيانات بعد الاستيراد:** < 500MB
- 🔍 **زمن استعلام PostGIS:** < 100ms للاستعلامات البسيطة

### المهام التفصيلية

#### 🔍 المهمة 1.1: توسيع schema.ts — ✅ *مكتمل*
- [x] إضافة الجداول الجغرافية الجديدة (9 جداول: sub_districts, neighborhoods, harat, sectors, neighborhood_units, blocks, plots, streets, street_segments)
- [x] تعريف العلاقات المناسبة مع الحفاظ على البنية الموجودة
- [x] ضمان التوافق مع UUID primary keys وsnake_case columns
- [ ] تحليل ملف `database/schema/yemen_platform_enhanced.sql` لفهم الهيكل الجغرافي الموجود
- [ ] توثيق الفجوات والتداخلات بين المخططين → **استخدم أداة [SchemaCrawler](https://www.schemacrawler.com/) أو pgAdmin ERD Generator**
- [ ] تحديد الجداول المفقودة والمطلوب إضافتها → **أنشئ جدول مقارنة بصري (Excel أو Notion)**
- ➕ **إضافة: كتابة تقرير "نقاط التصادم المتوقعة" (Collision Report)**
  - أمثلة: `department_id` vs `dept_id`, `location` vs `plotLocation`
  - الحل: اعتماد تسميات موحدة حسب دليل التسمية الجديد (Naming Convention v1)

**🔧 أدوات التنفيذ:**
```bash
# فحص المخطط الحالي
npx drizzle-kit introspect:pg
# مقارنة الجداول
psql -c "\dt"
```

#### 🔧 المهمة 1.2: تحديث server/storage.ts — ✅ *مكتمل*
- [x] إضافة CRUD operations للجداول الجديدة في IStorage interface
- [x] تنفيذ MemStorage implementation مع الحفاظ على الأنماط الموجودة
- [x] إضافة DatabaseStorage implementations لجميع الكيانات الجديدة
- [ ] دمج تعريفات الجداول من `shared/schema.ts` 
- [ ] دمج الجداول الجغرافية من `yemen_platform_enhanced.sql`
- [ ] ضمان توافق أنواع البيانات وعدم تضارب الأسماء → **استخدم Drizzle ORM مع strict typing**
- [ ] إضافة العلاقات المناسبة بين الجداول الجديدة والموجودة → **رسم ERD باستخدام [dbdiagram.io](https://dbdiagram.io/)**
- ➕ **إضافة: كتابة اختبارات هيكلية أولية (Schema Validation Tests)**
```typescript
// مثال: اختبار أن geo_plots يحتوي على عمود geometry من نوع MultiPolygon
test("geo_plots has valid PostGIS geometry", () => {
  expect(schema.geo_plots.geometry.type).toBe("geometry(MultiPolygon,4326)");
});
```

**🛠️ أدوات التطوير المطلوبة:**
- **Drizzle ORM** - لإدارة المخطط بأمان
- **dbdiagram.io** - لرسم ERD بصري
- **PostGIS** - للعمليات الجغرافية

#### 🗺️ المهمة 1.3: إضافة الهيكل الجغرافي الكامل (11 جدول)

**الهيكل الجغرافي الإداري (2 مفقود من 5):**
- [ ] إضافة جدول `geo_sub_districts` (العزل) مع PostGIS geometry
- [ ] إضافة جدول `geo_harat` (الحارات) مع PostGIS geometry

**الهيكل الجغرافي التخطيطي (6 من 6 مفقود):**
- [ ] إضافة جدول `geo_sectors` (القطاعات) مع PostGIS geometry
- [ ] إضافة جدول `geo_neighborhood_units` (وحدات الجوار) مع PostGIS geometry
- [ ] إضافة جدول `geo_blocks` (البلوكات) مع PostGIS geometry
- [ ] إضافة جدول `geo_plots` (قطع الأراضي) - **أولوية قصوى للـ LBAC** مع PostGIS geometry
- [ ] إضافة جدول `geo_streets` (الشوارع) مع LineString geometry
- [ ] إضافة جدول `geo_street_segments` (أجزاء الشوارع) مع LineString geometry

**طبقة الربط ونظام LBAC (3 جداول):**
- [ ] إضافة جدول `org_branches` (فروع الإدارات) مع العلاقات الجغرافية
- [ ] إضافة جدول `org_branch_coverage_areas` (مناطق تغطية الفروع)
- [ ] إضافة جدول `org_employee_scopes` (نطاقات الموظفين الجغرافية)

#### ⚙️ المهمة 1.4: تحديث إعدادات Drizzle — *محدثة*
- [ ] تعديل `drizzle.config.ts` ليشير للمخطط الموحد الجديد
- [ ] التأكد من إعدادات PostGIS في الكونفيج → **أضف هذا السطر إذا لم يكن موجوداً:**
```typescript
extensions: ["postgis"],
```
- [ ] فحص اتصال قاعدة البيانات والتأكد من عمل PostGIS → **اختبر بـ SQL مباشر:**
```sql
SELECT PostGIS_Version();
SELECT ST_AsText(ST_Point(44.2, 15.3));
```

**🔍 فحص سريع للصحة (Quick Health Check):**
```bash
# اختبار اتصال قاعدة البيانات
npm run db:check
# فحص PostGIS
psql -c "SELECT PostGIS_Version();"
```

#### 🚀 المهمة 1.5: تطبيق المخطط الجديد — *محدثة*

⚠️ **تحذير مهم: احفظ نسخة احتياطية أولاً!**
```bash
pg_dump $DATABASE_URL > backup_$(date +%Y%m%d_%H%M%S).sql
```

- [ ] تنفيذ `npm run db:push --force` لتطبيق المخطط الجديد → **احذر! احفظ نسخة احتياطية أولاً**
- [ ] التحقق من إنشاء/تعديل الجداول بنجاح (11 جدول جديد) → **استخدم:**
```bash
psql -c "\dt geo.*" && psql -c "\dt org.*"
```
- [ ] فحص إنشاء schema باسم `geo` و `org` في PostgreSQL
- [ ] التأكد من تفعيل PostGIS extensions → **تحقق من:**
```sql
SELECT * FROM pg_extension WHERE extname = 'postgis';
```
- [ ] تشغيل اختبار أساسي للتأكد من عمل التطبيق مع المخطط الجديد → **أنشئ smoke test يمر على 3 endpoints رئيسية**
- [ ] حل أي مشاكل في التوافق أو البيانات → **سجل كل خطأ في سجل القرارات**

**🔄 خطة التراجع (Rollback Plan):**
إذا فشلت هذه المرحلة:
1. تشغيل: `git reset --hard HEAD~1`
2. استعادة النسخة الاحتياطية: `psql $DATABASE_URL < backup_file.sql`
3. العودة للمخطط القديم: `npm run db:push`

#### 📊 المهمة 1.6: إنشاء واجهة إدخال البيانات الجغرافية — *محدثة*
- [ ] إنشاء صفحة إدارية لاستيراد البيانات الجغرافية (`/admin/geo-import`)
- [ ] بناء مكون رفع ملفات GeoJSON مع معاينة وتحقق → **استخدم MapLibre GL JS + Turf.js للتحقق من صحة Polygon**
- [ ] إنشاء واجهة استيراد بيانات المحافظات (22 محافظة من `gov_*.geojson`)
- [ ] إنشاء واجهة استيراد بيانات المديريات (333 مديرية من `dis_*.geojson`)
- [ ] تطبيق سكريبت استيراد البيانات مع شريط التقدم والإحصائيات → **استخدم Worker Threads أو BullMQ لتجنب تعليق الخادم**
- [ ] إضافة واجهة لمعاينة البيانات المستوردة وإحصائياتها → **عرض عدد السجلات، المساحة الكلية، عدد الأخطاء**
- [ ] إنشاء نظام التحقق من صحة البيانات الجغرافية → **استخدم:**
```typescript
import { booleanValid } from "@turf/turf";
if (!booleanValid(feature)) throw new Error("Invalid geometry");
```
- [ ] إضافة تقارير استيراد مفصلة (نجح/فشل/تحذيرات) → **تصدير CSV + عرض في واجهة Admin**
- [ ] إضافة واجهة لمراجعة العلاقات الجغرافية (محافظة → مديرية → عزلة) → **عرض Tree View تفاعلي**
- [ ] اختبار استيراد البيانات الحقيقية من الملفات المرفقة → **ابدأ بملف واحد ثم 10 ثم الكل**

**🛠️ أدوات التطوير المطلوبة:**
- **MapLibre GL JS** - عرض الخرائط والمعاينة
- **Turf.js** - التحقق من صحة البيانات الجغرافية
- **BullMQ** - معالجة المهام الثقيلة
- **React Query** - إدارة حالة الاستيراد

---

## 🚪 بوابة الجودة الأولى (Quality Gate 1)
**⚠️ قبل الانتقال للمرحلة الثانية، يجب تحقيق:**
- ✅ جميع الجداول الـ 11 تعمل مع PostGIS بدون أخطاء
- ✅ تم استيراد 100% من المحافظات (22) والمديريات (333) بدون أخطاء هندسية
- ✅ توجد علاقة صحيحة بين المحافظات والمديريات في قاعدة البيانات
- ✅ تم اختبار ST_Intersects بنجاح على عينة بيانات
- ✅ زمن استيراد 333 مديرية أقل من 30 ثانية
- ✅ معدل نجاح استيراد GeoJSON أكبر من 98%

**🧪 اختبارات التحقق الإجبارية:**
```sql
-- اختبار العلاقات الجغرافية
SELECT g.name_ar, COUNT(d.id) as districts_count 
FROM governorates g 
LEFT JOIN districts d ON ST_Intersects(g.geometry, d.geometry) 
GROUP BY g.id, g.name_ar;

-- اختبار PostGIS
SELECT ST_Area(geometry) FROM governorates LIMIT 1;
```

---

## 🔧 المرحلة الثانية: إعادة بناء طبقة البيانات وتفعيل LBAC
**المدة المتوقعة: 3 أسابيع**

### 🎯 الهدف (محدث)
تعديل "غرفة المحركات" في الواجهة الخلفية لتصبح مدركة للموقع الجغرافي — **مع ضمان الأمان، الأداء، والشفافية عبر تسجيل الوصول وقياس زمن الاستجابة**.

### 📊 مؤشرات الأداء المطلوبة (KPIs)
- ⚡ **زمن استعلام LBAC:** < 200ms
- 🔍 **زمن فلترة البيانات الجغرافية:** < 150ms
- 📋 **دقة الفلترة:** 100% (عدم عرض بيانات خارج النطاق)
- 🔒 **معدل منع الوصول غير المصرح:** 100%
- 📊 **نسبة تحسن الأداء بعد الفهرسة:** > 70%

### المهام التفصيلية

#### 🏗️ المهمة 2.1: تحديث طبقة البيانات — *محدثة*
- [ ] نسخ احتياطي من `server/storage.ts` الحالي
- [ ] إعادة كتابة واجهة `IStorage` لتشمل معطلات الموقع الجغرافي → **أضف معامل `userGeoScope?: Geometry`**
- [ ] تحديث كلاس `DatabaseStorage` ليستخدم المخطط الموحد
- [ ] إضافة دوال PostGIS للاستعلامات المكانية → **أمثلة أساسية:**
```typescript
getApplicationsInArea(area: Geometry) {
  return db.select().from(applications)
    .where(sql`ST_Intersects(${applications.plotGeometry}, ${area})`);
}
```
- [ ] اختبار الدوال الجديدة مع بيانات تجريبية → **استخدم بيانات من `geo_plots` تم إنشاؤها في المرحلة 1**

#### 🗺️ المهمة 2.2: تفعيل الفلترة الجغرافية — *محدثة*
- [ ] تعديل دالة `getApplications` لتفلتر بناءً على نطاق المستخدم الجغرافي
- [ ] تعديل دالة `getSurveyingDecisions` لتطبيق LBAC
- [ ] تعديل دالة `getTasks` لتعرض المهام في النطاق الجغرافي فقط
- [ ] إضافة middleware للتحقق من صلاحيات الموقع في كل endpoint → **مثال:**
```typescript
app.use("/api/tasks", enforceGeoAccess);
```
- [ ] اختبار الفلترة مع مستخدمين مختلفي المناطق → **أنشئ 3 مستخدمين افتراضيين لكل منهم scope مختلف**

#### 📦 المهمة 2.3: ترحيل البيانات الموجودة — *محدثة*
- [ ] كتابة سكربت `migrate_geo_data.ts` لمرة واحدة → **اجعله idempotent (قابل للتكرار بأمان)**
- [ ] قراءة بيانات المواقع من حقول jsonb في الطلبات الحالية
- [ ] إنشاء سجلات في `geo_plots` للمواقع المستخرجة → **استخدم UPSERT لتجنب التكرار**
- [ ] ربط الطلبات الموجودة بقطع الأراضي الجديدة
- [ ] التحقق من سلامة البيانات المرحلة → **مقارنة عدد السجلات قبل وبعد**
- [ ] تنظيف البيانات المكررة أو غير الصالحة → **أضف سجل حذف في جدول audit_log**

#### 🔒 المهمة 2.4: تطبيق نظام LBAC — *محدثة*
- [ ] إنشاء دوال `getUserGeographicScope(userId)` 
- [ ] إنشاء دوال `checkLocationAccess(userId, plotId)`
- [ ] تطبيق فلترة تلقائية في جميع استعلامات قاعدة البيانات
- [ ] إضافة تسجيل (logging) لمحاولات الوصول المرفوضة → **استخدم مكتبة Winston أو Pino**
- [ ] اختبار النظام مع سيناريوهات مختلفة

**🧪 اختبارات التكامل النهائية:**
- [ ] اختبار تسجيل دخول مهندس من صنعاء (يرى طلبات صنعاء فقط)
- [ ] اختبار تسجيل دخول مهندس من عدن (يرى طلبات عدن فقط)  
- [ ] اختبار محاولة وصول غير مصرح (خطأ 403)
- [ ] اختبار أداء LBAC مع 1000 طلب متزامن
- [ ] اختبار استقرار النظام لمدة 24 ساعة

---

## 🎨 المرحلة الثالثة: تفعيل الواجهات الأمامية
**المدة المتوقعة: 2 أسابيع**

### الهدف
جني ثمار العمل في الواجهات دون تغييرات كبيرة.

### المهام التفصيلية

#### 🏢 المهمة 3.1: بناء واجهات الإدارة الجديدة
- [ ] إنشاء صفحة إدارة الفروع (`/admin/branches`)
- [ ] إنشاء واجهة تعيين النطاقات الجغرافية للموظفين
- [ ] إنشاء خريطة إدارية لتحديد مناطق التغطية
- [ ] إضافة نماذج إضافة/تعديل/حذف الفروع
- [ ] ربط الواجهات بـ APIs الجديدة

#### 📍 المهمة 3.2: تحديث واجهة تقديم الطلبات
- [ ] تطوير مكون اختيار قطعة الأرض التفاعلي
- [ ] دمج خريطة لاختيار الموقع بدلاً من الإدخال اليدوي
- [ ] إضافة التحقق من صحة الموقع المختار
- [ ] تحديث نموذج تقديم طلب القرار المساحي
- [ ] اختبار تجربة المستخدم الجديدة

#### ✅ المهمة 3.3: التحقق من عمل النظام (اختبار حرج)
- [ ] اختبار "لوحة تحكم المهندس" - يجب أن تعرض البيانات المفلترة جغرافياً تلقائياً
- [ ] اختبار "لوحة مدير القسم" - التأكد من رؤية المهام في نطاقه فقط
- [ ] اختبار "لوحة المواطن" - التأكد من عرض طلباته فقط
- [ ] اختبار عملية تقديم طلب جديد بالموقع الجديد
- [ ] اختبار تعيين المهندسين بناءً على الموقع الجغرافي

#### 🔧 المهمة 3.4: تحسينات الأداء والتجربة
- [ ] إضافة فهارس (indexes) لاستعلامات PostGIS
- [ ] تحسين استعلامات البحث الجغرافي
- [ ] إضافة تخزين مؤقت للمناطق الجغرافية
- [ ] تحسين سرعة تحميل الخرائط
- [ ] إضافة مؤشرات تحميل للعمليات الجغرافية

---

## 🚪 بوابة الجودة الثانية (Quality Gate 2)
**⚠️ قبل الانتقال للمرحلة الثالثة، يجب تحقيق:**
- ✅ المستخدم يرى فقط البيانات في نطاقه الجغرافي (100% دقة)
- ✅ نظام LBAC يمنع الوصول للبيانات خارج النطاق (100% فعالية)
- ✅ جميع البيانات القديمة مرحلة وترتبط بالمواقع الصحيحة
- ✅ زمن استعلام LBAC أقل من 200ms
- ✅ معدل منع الوصول غير المصرح 100%

**🧪 اختبارات التحقق الإجبارية:**
```bash
# اختبار LBAC شامل
npm run test:lbac
# اختبار الأمان
npm run test:security
# اختبار الأداء
npm run test:performance
```

---

## 📊 مؤشرات النجاح والتحقق

### ✅ بوابة الجودة الأولى: معايير اكتمال المرحلة الأولى
- [ ] المخطط الموحد يعمل بدون أخطاء (11 جدول جديد)
- [ ] جميع الجداول الجديدة منشأة في قاعدة البيانات مع PostGIS
- [ ] استيراد 22 محافظة من ملفات GeoJSON بنجاح (100% نسبة نجاح)
- [ ] استيراد 333 مديرية من ملفات GeoJSON بنجاح (> 98% نسبة نجاح)
- [ ] PostGIS يعمل ويمكن تنفيذ استعلامات مكانية بسيطة (< 100ms)
- [ ] واجهة إدخال البيانات الجغرافية تعمل بكفاءة (< 30 ثانية للاستيراد الكامل)
- [ ] التحقق من صحة العلاقات الجغرافية (محافظة ← مديرية)
- [ ] **اختبار أداء:** زمن استعلام PostGIS أقل من 100ms
- [ ] **اختبار استقرار:** النظام يعمل لمدة 4 ساعات متواصلة بدون أخطاء

**🧪 اختبارات التحقق الإجبارية:**
```bash
# فحص شامل للجودة
npm run quality-check
# اختبار الأداء
npm run performance-test
# اختبار الاستقرار
npm run stability-test
```

### ✅ بوابة الجودة الثانية: معايير اكتمال المرحلة الثانية
- [ ] المستخدم يرى فقط البيانات في نطاقه الجغرافي (100% دقة)
- [ ] نظام LBAC يمنع الوصول للبيانات خارج النطاق (100% فعالية)
- [ ] جميع البيانات القديمة مرحلة وترتبط بالمواقع الصحيحة
- [ ] **اختبار أداء:** زمن استعلام LBAC أقل من 200ms
- [ ] **اختبار أمان:** فشل 100% من محاولات الوصول غير المصرح
- [ ] **اختبار التكامل:** نجاح جميع السيناريوهات المطلوبة

**🧪 اختبارات التكامل النهائية:**
```bash
# اختبار LBAC شامل
npm run test:lbac
# اختبار الأمان
npm run test:security
# اختبار الأداء
npm run test:performance
```

### ✅ بوابة الجودة الثالثة: معايير اكتمال المرحلة الثالثة
- [ ] لوحات التحكم تعمل مع البيانات المفلترة جغرافياً (100% دقة)
- [ ] المستخدمون يمكنهم اختيار المواقع من الخريطة (تجربة مستخدم سلسة)
- [ ] النظام يوزع المهام تلقائياً بناءً على الموقع (100% دقة)
- [ ] **اختبار تجربة المستخدم:** زمن تحميل الواجهات أقل من 3 ثوان
- [ ] **اختبار التوزيع:** دقة توزيع المهام الجغرافية 100%
- [ ] **اختبار الاستقرار:** النظام الكامل يعمل 48 ساعة بدون أخطاء

**🏆 اختبارات القبول النهائية:**
```bash
# اختبار شامل للنظام
npm run test:e2e
# اختبار الأداء الشامل
npm run test:full-performance
# اختبار تجربة المستخدم
npm run test:ux
```

---

## 📝 ملاحظات المتابعة

### آخر تحديث: 14 سبتمبر 2025
**الحالة الحالية:** ✅ 9 جداول جغرافية مُضافة بنجاح، 66 API endpoints جديد، 3 APIs مختبرة وتعمل، النظام يعمل بدون أخطاء حرجة

### المهام المكتملة مؤخراً (سبتمبر 14):
**🎯 إنجازات المرحلة الأولى - التنفيذ الفعلي:**
- ✅ **توسيع النموذج الجغرافي:** إضافة 9 جداول جغرافية جديدة مع علاقات Drizzle وتحقق Zod
- ✅ **تطوير API layer:** إنشاء 66 API endpoint جديد مع التصفية الهرمية و Zod validation
- ✅ **نجح اختبار قاعدة البيانات:** تم إنشاء جميع الجداول الـ9 بنجاح باستخدام uuid primary keys
- ✅ **اختبار APIs:** تم اختبار 3 من 9 كيانات جغرافية بنجاح (sub-districts, neighborhoods, sectors) مع عمل APIs بحالة 200
- ✅ **حل المشاكل التقنية الخطيرة:** أصبح النظام يعمل بدون أخطاء حرجة
- ✅ **تطبيق DatabaseStorage:** implementations أولية للجداول المختبرة

**🔧 إنجازات تقنية إضافية:**
- ✅ تحليل شامل للهيكل الجغرافي الحالي (3 من 11 جدول موجود)
- ✅ مراجعة ملفات GeoJSON المرفقة (محافظات + مديريات)
- ✅ تحديث الخطة لتشمل 11 جدول جغرافي + واجهة إدخال البيانات
- ✅ تحديد الأولويات: plots كأساس نظام LBAC

### المهام قيد التنفيذ:
- 🔄 **المهمة 1.6:** إكمال DatabaseStorage implementations للجداول الـ6 المتبقية
- 🔄 **الأولوية الحالية:** harat → neighborhood_units → blocks → plots → streets → street_segments
- 🔄 **الهدف المرحلي:** جميع الـ9 APIs تُرجع 200 OK مع دعم hierarchical filtering

### التحديات والحلول:
- ✅ **تحدي الحجم:** اكتشفنا أن المشروع يحتاج 11 جدول جديد بدلاً من 6
- ✅ **حل التقدير:** زيادة المدة المتوقعة للمرحلة الأولى من 2-3 أسابيع إلى 4-5 أسابيع
- ✅ **تحدي البيانات:** توفر ملفات GeoJSON ضخمة (22 محافظة + 333 مديرية)
- ✅ **حل الاستيراد:** تطوير واجهة إدارية متخصصة لاستيراد البيانات مع شريط تقدم ومعاينة
- ✅ **تحدي الأداء:** ضمان زمن استجابة سريع للاستعلامات الجغرافية
- ✅ **حل الأداء:** استخدام BullMQ + Worker Threads + فهرسة PostGIS المحسنة
- 🔄 **تحدي معلق:** ضمان التوافق بين المخطط الحالي والجديد بدون تعارض

### 📝 سجل قرارات التطوير (Decision Log):
- **12 سبتمبر 2025:** اختيار MapLibre بدلاً من OpenLayers (سبب: أداء أفضل + حجم أصغر)
- **12 سبتمبر 2025:** استخدام BullMQ لمعالجة الاستيراد (سبب: تجنب تعليق الخادم)
- **12 سبتمبر 2025:** تطبيق بوابات الجودة الإجبارية (سبب: ضمان عدم تراكم المشاكل)

### الخطوات التالية:
- 🎯 **البدء فوراً:** تنفيذ المهمة 1.1 (تحليل المخطط الحالي)
- 🎯 **الأولوية القصوى:** إنشاء المخطط الموحد مع 11 جدول جديد
- 🎯 **التركيز الثاني:** تطوير واجهة إدخال البيانات الجغرافية
- 🎯 **الاختبار المستمر:** تطبيق بوابات الجودة في كل مرحلة
- 🎯 **المراقبة الدائمة:** فحص الأداء والاستقرار كل ساعتين

### 🔍 فحص صحي مستمر (Continuous Health Monitoring):
```bash
# فحص سريع كل ساعة أثناء التطوير
npm run health-check
# يفحص: اتصال قاعدة البيانات + PostGIS + APIs الأساسية
# تنبيه تلقائي عند اكتشاف مشكلة
```

---

## 📚 المراجع والملفات المهمة

### ملفات الكود الأساسية:
- `shared/schema.ts` - المخطط الحالي
- `shared/unified_schema.ts` - المخطط الموحد الجديد (11 جدول جديد)
- `database/schema/yemen_platform_enhanced.sql` - الهيكل الجغرافي
- `server/storage.ts` - طبقة البيانات
- `server/routes.ts` - APIs الخلفية

### ملفات البيانات الجغرافية:
- `attached_assets/gov_*.geojson` - 22 محافظة مع geometry (جاهزة للاستيراد)
- `attached_assets/dis_*.geojson` - 333 مديرية مع geometry (جاهزة للاستيراد)
- سكريبتات الاستيراد المرفقة للتطبيق المباشر

### 🛠️ أدوات التطوير والمراقبة:
- **SchemaCrawler** - تحليل قاعدة البيانات
- **dbdiagram.io** - رسم ERD التفاعلي
- **MapLibre GL JS** - عرض الخرائط والمعاينة  
- **Turf.js** - التحقق من صحة البيانات الجغرافية
- **BullMQ** - معالجة المهام الثقيلة
- **Winston/Pino** - تسجيل الأحداث والمراقبة

### 📊 أدوات القياس والمراقبة:
```bash
# مراقبة الأداء المستمرة
npm run monitor:performance
# تتبع استخدام الذاكرة
npm run monitor:memory  
# مراقبة PostGIS
npm run monitor:postgis
```

### ملفات الواجهة الأمامية المهمة:
- `client/src/services/pages/SurveyingDecisionForm.tsx`
- `client/src/employee/pages/EngineerDashboard.tsx` 
- `client/src/components/gis/InteractiveDrawingMap.tsx`

### وثائق المرجع:
- `architecture_analysis.md` - التحليل الشامل للبنية
- `docs/Government-Automation-Master-Plan.md` - الخطة الرئيسية

---

*هذا الملف هو المرجع الرسمي لتقدم المشروع ويجب تحديثه عند اكتمال كل مهمة.*